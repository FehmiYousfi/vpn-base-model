default:
  image: ${CI_REGISTRY}/android/shared/docker-android/ndk:v1.0.0
  before_script:
    # We must keep these variables here. We can't do it inside the entrypoint, as idk how but
    # gitlab is going to convert them as a variable content instead of a variable file...
    - base64 -d - < "$PROTON_KEY_FILE2" > app/protonkey.jks
    - base64 -d -  < "$SERVICE_ACCOUNT_FILE" > app/service_account.json
    - md5sum app/protonkey.jks
    - md5sum app/service_account.json
    - echo "" >> gradle.properties # ensure a new line
    - base64 -d - < "$GRADLE_PROPERTIES_FILE2" >> gradle.properties
    - git fetch origin development
    - !reference [.checkout-core-submodule, before_script]
    - if [[ -f /load-env.sh ]]; then source /load-env.sh; fi

variables:
  GIT_FETCH_EXTRA_FLAGS: --tags
  ORG_GRADLE_PROJECT_useCoreGitSubmodule: "false"

stages:
  - image
  - analyze
  - build
  - startReview
  - test
  - report
  - bot
  - mirror
  - publish

.gradle-build-cache: &gradle-build-cache
  key:
    prefix: gradle-build-cache
    files:
      - gradle/wrapper/gradle-wrapper.properties
  paths:
    - ${CI_PROJECT_DIR}/build/gradle-build-cache
  policy: pull

.gradle-job:
  variables:
    CHECKOUT_CORE_SUBMODULE: "true"

########## Manage the Image ##########
.common-image:
  cache: {}
  stage: image
  image: $CI_REGISTRY/infra/kubernetes/images/docker:stable
  tags:
    - medium
  interruptible: true
  variables:
    DOCKER_HOST: tcp://docker:2375
  services:
    - name: $CI_REGISTRY/infra/kubernetes/images/docker:dind
      alias: docker
  before_script:
    - apk update
    - apk add make bash
  except:
    - schedules
    - triggers
  script:
    - make image branch=$CI_COMMIT_REF_SLUG


# Make image when we push to a branch -> run tests on top of this one
create-ci-image-auto:
  extends: .common-image
  only:
    refs:
      - development
    changes:
      - entrypoint
      - Dockerfile

# If we want to force regenerate the image
create-ci-image-manual:
  when: manual
  extends: .common-image

# Once the CI is green, we retag the current branch-development to latest
create-ci-image-latest:
  stage: publish
  extends: create-ci-image-auto
  tags:
    - small
  dependencies: [] # Prevent download + extract artifacts
  only:
    - development
  script:
    - make latest

cache:
  - key: $CI_COMMIT_REF_SLUG
    policy: pull
    paths:
      - .gradle

  - key: ${CI_COMMIT_SHORT_SHA}
    policy: pull
    paths:
      - '**/build/tmp/'

  - <<: *gradle-build-cache

detekt analysis:
  stage: analyze
  extends: .gradle-job
  cache:
    - key: $CI_COMMIT_REF_SLUG
      policy: pull-push
      paths:
        - .gradle
  tags:
    - medium
  script:
    - ./gradlew :app:detekt
  artifacts:
    expire_in: 4 weeks
    paths:
      - app/build/reports/detekt/
    reports:
      codequality: app/build/reports/detekt/detekt.json

build google debug:
  stage: build
  extends: .gradle-job
  cache:
    - key: $CI_COMMIT_REF_SLUG
      policy: pull
      paths:
        - .gradle

    - key: ${CI_COMMIT_SHORT_SHA}
      policy: push
      paths:
        - '**/build/tmp/'

    - <<: *gradle-build-cache
      policy: pull-push
  tags:
    - xlarge-k8s
  script:
    - ./gradlew assembleGooglePlayDebug
    - ./gradlew assembleGooglePlayDebugAndroidTest
    - export ARCHIVES_BASE_NAME=$(./gradlew -q getArchivesName | tail -n 1)
    - echo ${ARCHIVES_BASE_NAME}
    - echo "ARCHIVES_BASE_NAME=${ARCHIVES_BASE_NAME}" > deploy.env
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk
    reports:
      dotenv: deploy.env

build black:
  stage: build
  tags:
    - xlarge-k8s
  extends: .gradle-job
  script:
    - export BLACK_TOKEN="$(curl --silent $BLACK_TOKEN_URL)"
    - echo "Black url ${BLACK_DOMAIN}"
    - ./gradlew assembleBlackDebug
  when: manual
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk

build google play release:
  stage: build
  extends: .gradle-job
  except:
    - master
  tags:
    - xlarge-k8s
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew assembleGooglePlayRelease -PabiSplit -PbuildUniversalApk
  when: manual
  artifacts:
    expire_in: 1 week
    paths:
    - app/build/outputs/apk

build amazon release:
  stage: build
  extends: .gradle-job
  only:
    refs:
      - master
  tags:
    - xlarge-k8s
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew assembleAmazonRelease -PabiSplit -PbuildUniversalApk
  artifacts:
    expire_in: 3 week
    paths:
      - app/build/outputs/apk

build release (auto):
  stage: build
  extends: .gradle-job
  only:
    refs:
      - master
  tags:
    - xlarge-k8s
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew assembleDirectRelease -PabiSplit -PbuildUniversalApk
  artifacts:
    expire_in: 3 week
    paths:
      - app/build/outputs/apk

unit tests:
  stage: test
  extends: .gradle-job
  tags:
    - large
  script:
    - ./gradlew testGooglePlayDebug

coverage report:
  stage: report
  extends: .gradle-job
  tags:
    - large
  script:
    - ./gradlew jacocoTestReport
    - ./gradlew coverageReport
    - python3 jacocoConverter.py app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml app/src/main/java > app/build/reports/cobertura-coverage.xml
  allow_failure: true
  artifacts:
    expire_in: 1 week
    paths:
      - app/build/reports
    reports:
      cobertura: app/build/reports/cobertura-coverage.xml

pages:
  stage: publish
  tags:
    - small
  only:
    refs:
      - development
  script:
    - mkdir public
    - mv app/build/reports/jacoco/jacocoTestReport/html/* public
  artifacts:
    paths:
      - public

owasp check:
  stage: report
  extends: .gradle-job
  tags:
    - large
  script:
    - ./gradlew dependencyCheckAggregate
  when: manual
  artifacts:
    expire_in: 1 week
    paths:
      - build/reports

sync-app:
  cache: {}
  stage: mirror
  only:
    refs:
      - master
  before_script:
    - !reference [ default, before_script ]
    - apt update && apt-get install -y connect-proxy
  script:
    # Clone instead of using the current CI as it creates the error (shallow update not allowed)
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    # Push the latest tag we can find
    - git push public "$(git describe --abbrev=0)"

publish-apk-internal:
  stage: publish
  tags:
    - xlarge-k8s
  extends: .gradle-job
  only:
    refs:
      - development
  script:
    - ./gradlew openvpn:assemble
    - ./gradlew publishInternal -PabiSplit

startReview:
  before_script:
    - export REVIEW_APP_ARTIFACT_PATH="app/build/outputs/apk/googlePlay/debug/"${ARCHIVES_BASE_NAME}-googlePlay-debug.apk
    - echo ${REVIEW_APP_ARTIFACT_PATH}
  extends: .startReview

stopReview:
  before_script: []
  extends: .stopReview

include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'agarroux/publish-github'
    ref: master
    file: '/jobs/release.gitlab-ci.yml'

  - project: 'proton/mobile/android/proton-libs'
    ref: main
    file: '/ci/templates/checkout-core.gitlab-ci.yml'

  - local: '/appetize-integration.yml'

  - local: '/.gitlab-ci-firebase.yml'

i18n-sync-crowdin:
  variables:
      I18N_SYNC_BRANCH: development
      I18N_SYNC_CROWDIN_PROJECT: 'android-vpn'
  extends: .i18n-sync-crowdin-shared

i18n-commit-locales:
  variables:
      I18N_COMMIT_BRANCH_PUSH: development
      I18N_COMMIT_BRANCH_ALLOWED: development
      I18N_COMMIT_CROWDIN_PROJECT: 'android-vpn'
  extends: .i18n-commit-locales-shared

i18n-sync-crowdin-new-plans:
  variables:
    I18N_SYNC_BRANCH: feat/rebranding-main
    I18N_SYNC_CROWDIN_PROJECT: 'android-vpn'
  extends: .i18n-sync-crowdin-shared

publish-github:
  stage: publish
  only:
    refs:
      - master
  variables:
    RELEASE_APP: android-vpn
    RELEASE_GITHUB_REPOSITORY: $PUBLIC_REPO_URL
  extends: .release-make-release
